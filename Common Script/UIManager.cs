using System; using System.Collections; using System.Collections.Generic; using System.IO; using System.Threading.Tasks; using UnityEngine; using UnityEngine.Networking; using UnityEngine.SceneManagement; using UnityEngine.UI;   //PlayerPrefs //Common //key: Permissions,AutoLogin,MemberHash,MemberUID //AR_Paint //key: Paint_AutoSave,BG_Sound, Ef_Sound // public class UIManager : MonoBehaviour {          private _Member_info member_info = new _Member_info();     public TestviewLog test;     public bool isVisble;     public Toggle Focus_out;     public LoginMember loginMember = new LoginMember();     public string system_info;     public Progressbar progressbar;     public GameObject LoadingPage;     public List<GameObject> SceneManagers = new List<GameObject>();     public Transform Scene_Loading_local;     public GameObject SceneLoading;     public Transform NotMember_local;     public GameObject NotMemberAlert;       public GameObject LoginMain;     public Transform loginStep_local;     public GameObject loginStep;     public Transform Join_local;     public GameObject Join;      public GameObject OtherPage;     int SceneLoad_index=1;     [Header("PlayTopUI")]     public Transform playTopUI_local;     public PlayTopUI playTopUI;     private GameObject ActiveScene;     bool isFirst = true;          bool isFirstCompeleted = false;     // Start is called before the first frame update      public GameObject AppExitAlert;      [Header("Asset Bundle")]      string download_url;     public List<string> bundleFileName;     public AssetBunblesManager assetBundleManager;     public GameObject Download_Alert;     GameObject SNS_LoadingPage;      private string DeepLink_BRNO = "";     private string DeepLink_ENOB = "";       private float Sleep_timer = 300;     public bool isApp_running = false;         public struct SCENE_NAME     {         public SCENE_NAME(string[] s)         {            name = s;         }         public string[] name { get; }               }     private SCENE_NAME scene_name;      AndroidJavaObject pluginInstance;      string assetBundleDirectory;     public float keyboard_area = 0;             void Start()     {       #if UNITY_EDITOR          assetBundleDirectory = Application.streamingAssetsPath + "/bundle"; #elif UNITY_ANDROID || UNITY_IPHONE                    assetBundleDirectory = Application.persistentDataPath+"/bundle"; #endif         if (!Directory.Exists(assetBundleDirectory))         {             Directory.CreateDirectory(assetBundleDirectory);         }               // SplayerPrefs.ALLDelete();              Application.targetFrameRate = 60;          system_info = "deviceModel:," + SystemInfo.deviceModel;         system_info += " deviceName:," + SystemInfo.deviceName;         system_info += " graphicsDeviceName:," + SystemInfo.graphicsDeviceName;         system_info += " operatingSystem:," + SystemInfo.operatingSystem;                    //SceneManager.sceneCount     }     private void Awake()     {  #if UNITY_ANDROID         download_url = "http://www.hephaslab.com/download/bundle/"; #elif UNITY_IOS         download_url = "https://www.hallchuu.com/download/bundle/"; #endif         //   SplayerPrefs.ALLDelete();         Screen.sleepTimeout = SleepTimeout.NeverSleep;         scene_name = new SCENE_NAME(new string[] { "AR액션가면", "AR액션그림", "치카포카", "AR명함", "CommonUI" });         if (Application.platform == RuntimePlatform.Android)         {          }         //     DontDestroyOnLoad(gameObject);               }      public void DeepLinkMemuMove()     {         if (SceneManagers.Count == 3)         {             if (SceneManagers[2].name.Equals("ARCardAll"))             {                 Debug.Log(SceneManagers[2].name+"   명함켜져있음");              }             else             {                 Debug.Log(SceneManagers[2].name + "   명함안켜져있음");             }                      }         else         {             Debug.Log("명함아님 이동해야함");         }     }     public void SetDeeplinkinfo(string BRNO,string ENOB)     {         DeepLink_BRNO = BRNO;         DeepLink_ENOB = ENOB;              }     public string[] GetDeeplinkinfo()     {              string[] deepData = new string[] { DeepLink_BRNO, DeepLink_ENOB };         DeepLink_BRNO = "";         DeepLink_ENOB = "";         return deepData;     }     public void onAppExitAlert()     {         AppExitAlert.SetActive(true);     }     public bool isLoginState()     {        return member_info.GetContainsKey(_Member_info.KEY_NAME.ARA_MBRS_CI_VAL);     }     public string Get_member_info(_Member_info.KEY_NAME key)     {         return member_info.GetValue(key);     }     public void LoadingStart()     {         if (LoadingPage.activeSelf && isFirst)         {              // Invoke("loading_start", 1f);             Invoke("loading_Once_start", 1f);                   isFirst = false;         }     }     public void SetMemberInfo(_Member_info member)     {         member_info = member;     }     public void SetMemberInfo(string key, string value)     {         member_info.SetValue(key, value);     }     public void loading_start()     {        // progressbar.SetProgress(1);        StartCoroutine(SceneLoadAsync(SceneManager.sceneCountInBuildSettings));     }     public void loading_Once_start()     {         // progressbar.SetProgress(1);          //StartCoroutine(SceneLoadAsyncOnec());                     //리소스 다운로드          StartCoroutine(GetAssetBundleManifest());       }     public void ALLloadNot_loading_start()     {         // progressbar.SetProgress(1);         StartCoroutine(SceneLoadAsync(SceneManager.sceneCountInBuildSettings));     }     // Update is called once per frame     void Update()     {             if (TouchScreenKeyboard.visible)           {                 if(!isVisble) isVisble = true;             if (keyboard_area == 0)             {                 #if UNITY_ANDROID                     keyboard_area = GetKeyboardSize(); #elif UNITY_IOS                     keyboard_area = TouchScreenKeyboard.area.height; #endif               //   if (keyboard_area!=0) test.SetLog("\nkeyboard_area : "+ keyboard_area+"\n");             }          }         else         {             keyboard_area = 0;          }          if (Application.platform == RuntimePlatform.Android)         {             if (Input.GetKeyDown(KeyCode.Escape))             {                              }         }         else if (Application.platform == RuntimePlatform.WindowsEditor)         {             if (Input.GetKeyDown(KeyCode.Escape))             {                                }         }              }     public bool GetContainsScene(string scene_name)     {         return ActiveScene.name.Equals(scene_name);     }     IEnumerator GetAssetBundleManifest()     {          using (UnityWebRequest www = UnityWebRequest.Get (download_url + "AssetBundles"))         {             yield return www.SendWebRequest();                   if (www.result == UnityWebRequest.Result.ConnectionError)                 {                      gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", "네트워크 상태를 체크해주세요.");                  }                 else                 {                      if (www.result != UnityWebRequest.Result.Success)                     {                         Debug.Log(www.error);                     }                     else                     {                      // 에셋 번들을 저장할 경로의 폴더가 존재하지 않는다면 생성시킨다.                     if (!Directory.Exists(assetBundleDirectory))                     {                         Directory.CreateDirectory(assetBundleDirectory);                         FileStream fs = new FileStream(assetBundleDirectory + "/AssetBundles", System.IO.FileMode.Create);                         fs.Write(www.downloadHandler.data, 0, (int)www.downloadedBytes);                         fs.Close();                          yield return new WaitForSeconds(0.1f);                          AssetBundle assetBundle = AssetBundle.LoadFromFile(assetBundleDirectory + "/AssetBundles");                         AssetBundleManifest manifest = assetBundle.LoadAsset<AssetBundleManifest>("AssetBundleManifest");                         string[] bundles = manifest.GetAllAssetBundles();                          for (int i = 0; i < bundles.Length; i++)                         {                             bundleFileName.Add(bundles[i]);                         }                         assetBundle.Unload(true);                     }                     else                     {                           FileInfo fi = new FileInfo(assetBundleDirectory + "/AssetBundles");                         if (fi.Exists)                         {                                                          progressbar.SetProgress("다운로드 데이터 확인중···", 0f);                             Debug.Log("로컬 번들");                             AssetBundle assetBundle = null;                             AssetBundleManifest manifest = null;                             bool isFail = false;                             AsyncOperation asyOp = null;                             //가지고있는 번들 해쉬버전                             //                                                                                           assetBundle = AssetBundle.LoadFromFile(assetBundleDirectory + "/AssetBundles");                                                            if (assetBundle == null)                             {                                 isFail = true;                                 Resources.UnloadUnusedAssets();                                 foreach (string _file in Directory.GetFiles(assetBundleDirectory)) //파일 탐색                                 {                                  //   File.SetAttributes(_file, FileAttributes.Normal); //파일 읽기 전용 해제                                     File.Delete(_file); //파일 삭제                                 }                                 if (assetBundle != null)                                 {                                                                         asyOp = assetBundle.UnloadAsync(true);                                   }                                 if (isFail)                                 {                                     if (asyOp != null)                                     {                                         while (!asyOp.isDone)                                         {                                              yield return null;                                          }                                     }                                     Debug.Log("재시도");                                     yield return new WaitForSeconds(0.1f);                                      Download_Alert.SetActive(true);                                      yield break;                                  }                             }                                                                                 manifest = assetBundle.LoadAsset<AssetBundleManifest>("AssetBundleManifest");                             string[] bundles = manifest.GetAllAssetBundles();                                 List<Hash128> local_hash = new List<Hash128>();                                 for (int i = 0; i < bundles.Length; i++)                                 {                                     local_hash.Add(manifest.GetAssetBundleHash(bundles[i]));                                 }                                 assetBundle.Unload(true);                                  //다운로드 번들 해쉬버전                                     Debug.Log("다운로드 번들");                                 assetBundle = AssetBundle.LoadFromMemory(www.downloadHandler.data);                                 manifest = assetBundle.LoadAsset<AssetBundleManifest>("AssetBundleManifest");                                 string[] DownLoadBundles = manifest.GetAllAssetBundles();                                 List<Hash128> DownloadvideoHash = new List<Hash128>();                                 for (int i = 0; i < DownLoadBundles.Length; i++)                                 {                                     DownloadvideoHash.Add(manifest.GetAssetBundleHash(DownLoadBundles[i]));                                 }                                 assetBundle.Unload(true);                                    List<string> BundlesNameTemp = new List<string>();                                 //다운로드된 번들버전내용물과 로컬 번들버전내용물이 같은지 비교                                 if (local_hash.Count == DownloadvideoHash.Count)                                 {                                     Debug.Log("bundle hash 갯수 같음 local_hash:" + local_hash.Count + " DownloadvideoHash:" + DownloadvideoHash.Count);                                     for (int i = 0; i < DownloadvideoHash.Count; i++)                                     {                                          Debug.Log("local_hash:" + local_hash[i] + "   DownloadvideoHash:" + DownloadvideoHash[i]);                                         if (!local_hash[i].Equals(DownloadvideoHash[i]))                                         {                                             bool caching = Caching.ClearCachedVersion(bundles[i], local_hash[i]);                                             Debug.Log("Caching.ClearAllCachedVersions  " + caching);                                             BundlesNameTemp.Add(DownLoadBundles[i]);                                         }                                         else                                         {                                             if (!new FileInfo(assetBundleDirectory + "/" + bundles[i]).Exists)                                             {                                                 BundlesNameTemp.Add(DownLoadBundles[i]);                                             }                                           }                                      }                                 }                                 else                                 {                                     for (int i = 0; i < DownloadvideoHash.Count; i++)                                     {                                          bool isCheck = true;                                         for (int j = 0; j < local_hash.Count; j++)                                         {                                             if (local_hash[j].Equals(DownloadvideoHash[i]))                                             {                                                 isCheck = false;                                             }                                          }                                          if (isCheck)                                         {                                             BundlesNameTemp.Add(DownLoadBundles[i]);                                         }                                       }                                  }                                 yield return new WaitForSeconds(1f);                                      if (BundlesNameTemp.Count > 0)                                 {                                     BundlesNameTemp.Add("AssetBundles");                                     StartCoroutine(GetAssetBundle(BundlesNameTemp));                                 }                                 else                                 {                                     progressbar.SetProgress("다운로드 데이터 확인완료", 1f);                                     yield return new WaitForSeconds(1f);                                     StartCoroutine(SceneLoadAsyncOnec());                                 }                                                                                                                }                         else                         {                               foreach (string _file in Directory.GetFiles(assetBundleDirectory)) //파일 탐색                             {                                 File.SetAttributes(_file, FileAttributes.Normal); //파일 읽기 전용 해제                                 File.Delete(_file); //파일 삭제                             }                                FileStream fs = new FileStream(assetBundleDirectory + "/AssetBundles", System.IO.FileMode.Create);                             fs.Write(www.downloadHandler.data, 0, (int)www.downloadedBytes);                             fs.Close();                              yield return new WaitForSeconds(0.1f);                              AssetBundle assetBundle = AssetBundle.LoadFromFile(assetBundleDirectory + "/AssetBundles");                             AssetBundleManifest manifest = assetBundle.LoadAsset<AssetBundleManifest>("AssetBundleManifest");                             string[] bundles = manifest.GetAllAssetBundles();                              for (int i = 0; i < bundles.Length; i++)                             {                                 bundleFileName.Add(bundles[i]);                             }                             assetBundle.Unload(true);                               StartCoroutine(GetAssetBundle(bundleFileName));                          }                                             }                         }                 }         }              }      IEnumerator GetAssetBundle(List<string> bundles_name)     {                  for (int i = 0; i < bundles_name.Count; i++)         {             bool isDone = false;             using (UnityWebRequest www = UnityWebRequest.Get(download_url + bundles_name[i]))             {                  var requset = www.SendWebRequest();                 if (www.result == UnityWebRequest.Result.ConnectionError)                 {                      gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", "네트워크 상태를 체크해주세요.");                                      }                 else {                       FileInfo fi = new FileInfo(assetBundleDirectory + "/" + bundles_name[i]);                     if (fi.Exists)                     {                         fi.Delete();                      }                       yield return new WaitForSeconds(0.1f);                     Debug.Log("다운로드시작");                     string file_Content_Length = www.GetResponseHeader("Content-Length");                    /* foreach (KeyValuePair<string, string> dd in www.GetResponseHeaders())                     {                         Debug.Log("Header key+value: " + dd.Key + " " + dd.Value);                     }*/                     long long_fileSize = 0;                     bool canConvert = long.TryParse(file_Content_Length, out long_fileSize);                     int fileSize = 0;                     if (canConvert)                     {                         fileSize = ((int)long_fileSize) / 1024;                     }                     while (!isDone)                     {                          progressbar.SetProgress("데이터 다운로드 중...(" + String.Format("{0:n0}", ((int)(www.downloadedBytes / 1024))) + "/" + String.Format("{0:n0}", fileSize) + " kb) ", requset.progress);                         Debug.Log(www.downloadedBytes);                         yield return null;                           if (requset.progress >= 1f)                         {                             int downbytesInt = ((int)(www.downloadedBytes / 1024));                             if (downbytesInt == 0)                             {                                 downbytesInt = 1;                             }                             progressbar.SetProgress("데이터 다운로드 완료 (" + String.Format("{0:n0}", downbytesInt) + "/" + String.Format("{0:n0}", fileSize) + " kb)", 1f);                              try                             {                                 FileStream fs = new FileStream(assetBundleDirectory + "/" + bundles_name[i], System.IO.FileMode.Create);                                 fs.Write(www.downloadHandler.data, 0, (int)www.downloadedBytes);                                 fs.Close();                             }                             catch(Exception e)                             {                                 gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", "파일쓰기 실패" + e);                             }                               if (bundles_name[i].Equals("video"))                             {                                 progressbar.SetProgress("압축 푸는중... ", 0f);                                 if (!Directory.Exists(assetBundleDirectory + "/video_list/"))                                 {                                     Directory.CreateDirectory(assetBundleDirectory + "/video_list/");                                 }                                   AssetBundleCreateRequest asyncBundleRequest = AssetBundle.LoadFromFileAsync(assetBundleDirectory + "/" + bundles_name[i]);                                 yield return asyncBundleRequest;                                 AssetBundle tempBunble = asyncBundleRequest.assetBundle;                                  string[] name = tempBunble.GetAllAssetNames();                                 float prog_value = 1f / name.Length;                                 for (int g = 0; g < name.Length; g++)                                 {                                     progressbar.SetProgress("압축 푸는중... ", prog_value * g);                                     TextAsset textasset = (TextAsset)tempBunble.LoadAssetAsync<TextAsset>(name[g]).asset;                                     File.WriteAllBytes(Path.Combine(assetBundleDirectory + "/video_list/" + textasset.name + ".mp4"), textasset.bytes);                                  }                                 progressbar.SetProgress("압축 해제 완료", 1f);                             }                              isDone = true;                               yield return new WaitForSeconds(1f);                            }                       }                     if (www.result != UnityWebRequest.Result.Success)                     {                         gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", www.error.ToString());                       //  Debug.Log();                     }                      yield return new WaitForSeconds(1f);                     www.Dispose();                 }             }         }                 StartCoroutine(SceneLoadAsyncOnec());     }          public int GetKeyboardSize()     {         using (AndroidJavaClass UnityClass = new AndroidJavaClass("com.unity3d.player.UnityPlayer"))         {             AndroidJavaObject View = UnityClass.GetStatic<AndroidJavaObject>("currentActivity").Get<AndroidJavaObject>("mUnityPlayer").Call<AndroidJavaObject>("getView");              using (AndroidJavaObject Rct = new AndroidJavaObject("android.graphics.Rect"))             {                 View.Call("getWindowVisibleDisplayFrame", Rct);                  return (int)(1080f/(float)Screen.height* (float)(Screen.height - Rct.Call<int>("height")));             }         }     }     IEnumerator SceneLoadAsyncOnec()     {         if (SceneLoading == null)         {             assetBundleManager.BunblesLoad(AssetBunblesManager.BUNBLE_NAME.common_image,true);             SceneLoading = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.common_ui, "Scene_Loading"), Scene_Loading_local, false);             SceneLoading.name = "Scene_Loading";         }           SceneLoad_index = 1;             progressbar.SetProgress(scene_name.name[SceneLoad_index-1] + " 준비중...", 0f);             yield return new WaitForSeconds(1f);             AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(SceneLoad_index, LoadSceneMode.Additive);                      asyncLoad.allowSceneActivation = false;              asyncLoad.completed += AsyncLoad_Start_OnecCompleted;              while (!asyncLoad.isDone)             {                 progressbar.SetProgress(scene_name.name[SceneLoad_index-1] + " 로딩중...", asyncLoad.progress);                 yield return null;                               if (asyncLoad.progress >= 0.9f)                 {                     progressbar.SetProgress(scene_name.name[SceneLoad_index-1] + " 로딩완료!", 1f);                     asyncLoad.allowSceneActivation = true;                  }              }             yield return new WaitForSeconds(1f);                        }     private void AsyncLoad_Start_OnecCompleted(AsyncOperation obj)     {          Debug.Log("로딩완료");          if (playTopUI == null)         {             playTopUI = GameObject.Instantiate(assetBundleManager.GetResources(AssetBunblesManager.BUNBLE_NAME.play_ui, "playTopUI"), playTopUI_local, false).GetComponent<PlayTopUI>();             playTopUI.name = "playTopUI";             OtherPage = playTopUI.OtherPage;         }           LoadSceneSetting();         SceneManagers.Add(OtherPage);          if (PlayerPrefs.GetInt("AutoLogin") == 1)         {             //자동로그인시 MemberHash로 서버에서 확인후 자동로그인.             // PlayerPrefs.GetString("MemberHash")               if (SplayerPrefs.isPlayerPrefs("CI_VAL") && SplayerPrefs.isPlayerPrefs("MemberHash"))             {                 List<string> key = new List<string>();                 List<string> value = new List<string>();                  key.Add("ARA_MBRS_CI_VAL");                 key.Add("ARA_MBRS_HASH_VAL");                 value.Add(SplayerPrefs.GetPlayerPrefs_string("CI_VAL"));                 value.Add(SplayerPrefs.GetPlayerPrefs_string("MemberHash"));                  gameObject.GetComponent<UnityWeb>().WebSend(TB_TYPE.MBRS_INFO, UnityWeb.SEND_URL.Busan, URLs.AutoLogin, URLs.Menu.Join, key, value, AutoLoginCallback);             }             else             {                 LoadCompleted_SceneStart();                 //AutoLoginSceneStart();             }           }         else         {             LoadCompleted_SceneStart();           }       }      IEnumerator SceneLoadAsyncOnec(int count)     {                    AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(count, LoadSceneMode.Additive);                   asyncLoad.allowSceneActivation = false;          asyncLoad.completed += AsyncLoad_OnecCompleted;                  while (!asyncLoad.isDone)         {                         yield return null;                      asyncLoad.allowSceneActivation = true;           }         SceneManager.SetActiveScene(SceneManager.GetSceneByBuildIndex(count));         yield return new WaitForSeconds(1f);      }     private void AsyncLoad_OnecCompleted(AsyncOperation obj)     {                  Debug.Log("로딩완료");             LoadSceneSetting();             }           IEnumerator SceneLoadAsync(int count)     {         float progValue = ((float)1 / ((float)count-1));         for (int i = 1; i < count; i++)         {             SceneLoad_index = i;                           progressbar.SetProgress(scene_name.name[i] + " 준비중...", (progValue * (i - 1)));             yield return new WaitForSeconds(1f);             AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(i, LoadSceneMode.Additive);                       asyncLoad.allowSceneActivation = false;                          asyncLoad.completed += AsyncLoad_completed;                          while (!asyncLoad.isDone)             {                 progressbar.SetProgress(scene_name.name[i]+" 로딩중...", (progValue*(i-1))+asyncLoad.progress* progValue);                 yield return null;                 Debug.Log(asyncLoad.progress);                 if (asyncLoad.progress >= 0.9f)                 {                                        progressbar.SetProgress(scene_name.name[i]+" 로딩완료!", (progValue * (i - 1)) + asyncLoad.progress * progValue);                     asyncLoad.allowSceneActivation = true;                                      }              }             yield return new WaitForSeconds(0.2f);         }       }      private void AsyncLoad_completed(AsyncOperation obj)     {                  Debug.Log("로딩완료");          LoadSceneSetting();          if (SceneLoad_index == SceneManager.sceneCountInBuildSettings-1)         {             SceneManagers.Add(OtherPage);             if (PlayerPrefs.GetInt("AutoLogin") == 1)             {                 //자동로그인시 MemberHash로 서버에서 확인후 자동로그인.                 // PlayerPrefs.GetString("MemberHash")                                 if (SplayerPrefs.isPlayerPrefs("CI_VAL") && SplayerPrefs.isPlayerPrefs("MemberHash"))                 {                     List<string> key = new List<string>();                     List<string> value = new List<string>();                      key.Add("ARA_MBRS_CI_VAL");                     key.Add("ARA_MBRS_HASH_VAL");                     value.Add(SplayerPrefs.GetPlayerPrefs_string("CI_VAL"));                     value.Add(SplayerPrefs.GetPlayerPrefs_string("MemberHash"));                      gameObject.GetComponent<UnityWeb>().WebSend(TB_TYPE.MBRS_INFO, UnityWeb.SEND_URL.Busan, URLs.AutoLogin, URLs.Menu.Join, key, value, AutoLoginCallback);                 }                 else                 {                     LoadCompleted_SceneStart();                     //AutoLoginSceneStart();                 }               }             else             {                 LoadCompleted_SceneStart();               }         }      }      private void LoadSceneSetting()     {         GameObject temp_object;         switch (SceneLoad_index)         {              case 1:                  temp_object = GameObject.Find("ScreenValManage").gameObject;                 temp_object.GetComponent<ActionMaskGroupManage>().uIManager = gameObject;                 test.SetLog("temp_object  " + temp_object.name);                 temp_object.GetComponent<ActionMaskGroupManage>().ActionMaskGroup.SetActive(true);                 SceneManagers.Add(temp_object.GetComponent<ActionMaskGroupManage>().ActionMaskGroup);                  break;             case 2:                  temp_object = GameObject.Find("ARPaint").gameObject;                 temp_object.GetComponent<Paint_Manager>().uIManager = gameObject;                 SceneManagers.Add(temp_object.GetComponent<Paint_Manager>().ARPaint);                 break;             case 3:                  temp_object = GameObject.Find("ChikaPokaGroupManage").gameObject;                 temp_object.GetComponent<ChikaPokaGroupManage>().uIManager = gameObject;                  SceneManagers.Add(temp_object.GetComponent<ChikaPokaGroupManage>().ChikaPokaGroup);                 break;             case 4:                  temp_object = GameObject.Find("ARCardAll_get").gameObject;                 temp_object.GetComponent<ARCardAll_Get>().uIManager = gameObject;                 SceneManagers.Add(temp_object.GetComponent<ARCardAll_Get>().ARCardAll);                 break;           }         if (GameObject.Find("EventSystem") != null)         {             Destroy(GameObject.Find("EventSystem"));         }     }     private void AutoLoginCallback(string req, string resCode, List<Dictionary<string, string>> data)     {         Debug.Log(req);         string contents = "";         for (int i = 0; i < data.Count; i++)         {             foreach (KeyValuePair<string, string> pair in data[i])             {                 Debug.Log(pair.Key + " : " + pair.Value);                  test.SetLog(pair.Key + " : " + pair.Value + "\n");                 contents += pair.Key + " : " + pair.Value + " ";             }         }         if (req.Equals("Sucess"))         {             if (resCode.Equals("00"))             {                SetMemberInfo("ARA_MBRS_EMLADR", data[0]["ARA_MBRS_EMLADR"]);//회원 이메일                 SetMemberInfo("ARA_MBRS_NM", data[0]["ARA_MBRS_NM"]);//회원 이름                 SetMemberInfo("ARA_MBRS_CI_VAL", data[0]["ARA_MBRS_CI_VAL"]);//회원 CI_VAL                 SetMemberInfo("ARA_MBRS_HASH_VAL", data[0]["ARA_MBRS_HASH_VAL"]);//회원 자동로그인 해시                 SetMemberInfo("ARA_MBRS_RRNO", data[0]["ARA_MBRS_RRNO"]);//회원 주민번호 암호화                 SetMemberInfo("ARA_SNS_NATV_NO", data[0]["ARA_SNS_NATV_NO"]);//회원 SNS 고유번호                 SetMemberInfo("ARA_LOGIN_DVCD", data[0]["ARA_LOGIN_DVCD"]);//회원 구분코드 (SNS)                 SetMemberInfo("ARA_MBRS_SEX_DVCD", data[0]["ARA_MBRS_SEX_DVCD"]);//회원 성별                  SetMemberInfo("MMT_TCCCO_DVCD", data[0]["MMT_TCCCO_DVCD"]);//회원 통신사                 SetMemberInfo("ARA_MBRS_MPNO", data[0]["ARA_MBRS_MPNO"]);//회원 전화번호                      SetMemberInfo("ARA_EVNT_AND_AD_LEME_YN", data[0]["ARA_EVNT_AND_AD_LEME_YN"]);//회원 이벤트알림여부                                                                                                        //   uiManager.SetMemberInfo("ARA_MBNK_LNK_YN", data[0]["ARA_MBNK_LNK_YN"]);//회원 모바일 연동여부                 SetMemberInfo("ARA_SV_U_LEME_YN", data[0]["ARA_SV_U_LEME_YN"]);//회원서비스이용 알림여부                                                                                          // uiManager.SetMemberInfo("ARA_MBRS_STCD", data[0]["ARA_MBRS_STCD"]);//회원 상태코드*/                  SplayerPrefs.PlayerPrefsSave("ARA_MBRS_NATV_MGNO", data[0]["ARA_MBRS_NATV_MGNO"]);                 SplayerPrefs.PlayerPrefsSave("CI_VAL", data[0]["ARA_MBRS_CI_VAL"]);                 SplayerPrefs.PlayerPrefsSave("MemberHash", data[0]["ARA_MBRS_HASH_VAL"]);                                member_info = new _Member_info();                 member_info.SetValue(_Member_info.KEY_NAME.ARA_SV_U_LEME_YN, data[0]["ARA_SV_U_LEME_YN"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_EMLADR, data[0]["ARA_MBRS_EMLADR"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_EVNT_AND_AD_LEME_YN, data[0]["ARA_EVNT_AND_AD_LEME_YN"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_NM, data[0]["ARA_MBRS_NM"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_CI_VAL, data[0]["ARA_MBRS_CI_VAL"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_HASH_VAL, data[0]["ARA_MBRS_HASH_VAL"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_SEX_DVCD, data[0]["ARA_MBRS_SEX_DVCD"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_RRNO, data[0]["ARA_MBRS_RRNO"]);                 member_info.SetValue(_Member_info.KEY_NAME.MMT_TCCCO_DVCD, data[0]["MMT_TCCCO_DVCD"]);                 member_info.SetValue(_Member_info.KEY_NAME.ARA_MBRS_MPNO, data[0]["ARA_MBRS_MPNO"]);                  AutoLoginSceneStart();             }             else             {                 gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", "자동로그인 정보가 다릅니다.\n다시 로그인해주세요.");                 SplayerPrefs.PlayerPrefsSave("AutoLogin", 0);                 LoadCompleted_SceneStart();             }         }         else         {             gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", "자동로그인에 실패하였습니다.");             LoadCompleted_SceneStart();         }     }          private void LoadCompleted_SceneStart()     {         loginStep = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "LoginStep"), loginStep_local, false);         loginStep.name = "loginStep";         isApp_running = true;         LoadingPage.SetActive(false);         if (DeepLink_BRNO != "" || DeepLink_ENOB != "")         {             AutoLoginSceneStart();         }                }     public void AutoLoginSceneStart()     {           LoadingPage.SetActive(false);         SceneLoading.SetActive(true);         LoginMain.SetActive(false);         StartPlay();     }          public void SceneLoding_Show()     {         SceneLoading.SetActive(true);     }       public void Keyboard_out()     {         Focus_out.Select();             }     public void MenuUnActive()     {         if (ActiveScene != null)         {             ActiveScene.SetActive(false);         }     }     public void MenuUnLoad()     {         if(SceneLoad_index != 1 && SceneLoad_index !=5)         {                             StartCoroutine(UpLoadSceneAsync(SceneLoad_index));                 SceneManagers.RemoveAt(2);                      }         else         {              if(ActiveScene!=null) ActiveScene.SetActive(false);         }     }      private IEnumerator UpLoadSceneAsync(int index)     {        yield return SceneManager.UnloadSceneAsync(index);              }      public void chikapokaUnload()     {         SceneManagers[2].SendMessage("unload_init");     }     public void chikapokaUnload_init_completed()     {          Invoke("Invoke_init", 1f);     }     public void Invoke_init()     {         MenuUnLoad();         MenuLoadScene(0);     }       public void MenuActive(int index)     {          Debug.Log("SceneManagers[index].activeSelf : " + SceneManagers[index].activeSelf);         Debug.Log("SceneManagers[index].activeSelf : " + SceneManagers[index].activeSelf);         SceneManagers[index].SetActive(true);         ActiveScene = SceneManagers[index];         //  ARScene[index+1].         SceneManager.SetActiveScene(SceneManager.GetSceneAt(index+1));         Debug.Log("scene_name.name[index] : " + scene_name.name[index]);         if (!scene_name.name[index].Equals("AR명함") && !scene_name.name[index].Equals("CommonUI"))         {             if (!isLoginState())             {                  NotMemberAlertOpen("MenuActive");              }         }     }     public void MenuLoadScene(int index)     {         SceneLoad_index = index+1;         if (SceneLoad_index != 1 && SceneLoad_index != 5) {             StartCoroutine(SceneLoadAsyncOnec(SceneLoad_index));         }         else if(index ==0)         {             Invoke("ActionMaskOpen", 1f);                          ActiveScene = SceneManagers[index];             SceneManager.SetActiveScene(SceneManager.GetSceneByBuildIndex(SceneLoad_index));         }         else{                         OtherPage.SetActive(true);             playTopUI.BannerSelect();             ActiveScene = SceneManagers[1];             SceneManager.SetActiveScene(SceneManager.GetSceneByBuildIndex(0));         }         //  ARScene[index+1].         //SceneManager.SetActiveScene(SceneManager.GetSceneAt(index));                       }      public void ActionMaskOpen()     {         SceneManagers[0].SetActive(true);     }       /// <summary>     /// Login Step 관련     /// </summary>     public void NaverLoginClick()     {         loginStep.SendMessage("NaverLogin");     }          public void GoogleLoginClick()     {
        SNS_LoadingPage = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.common_ui, "sns_loading"), LoginMain.transform, false);         loginStep.SendMessage("GoogleLogin");               }     public void EmailLoginClick()     {         loginStep.SendMessage("Email_Login");              }       public void SNS_LoadingPageDestroy()     {         if (SNS_LoadingPage != null)         {             Destroy(SNS_LoadingPage);         }     }                  public void ShowActive(GameObject obj)     {          obj.SetActive(true);       }     public void WaitDevelop()     {         gameObject.GetComponent<Alert_Manager>().ShowAlert("알림", "반영 대기중입니다.");     }     public void ErrorReport(string error_contents)     {         string[] key = { "user_uid", "error_contents", "system_info" };         string[] value = { loginMember.GetUidValue(), error_contents, system_info};         gameObject.GetComponent<UnityWeb>().WebSend(UnityWeb.SEND_URL.COCOA, "/main/log/error_log.php", key, value, CallbackErrorReport);                   }     public void CallbackErrorReport(string req, List<Dictionary<string, string>> data)     {         Debug.Log(req);         for (int i = 0; i < data.Count; i++)         {             foreach (KeyValuePair<string, string> pair in data[i])             {                 Debug.Log(pair.Key + " : " + pair.Value);                  test.SetLog(pair.Key + " : " + pair.Value + "\n");             }         }     }     public void StartPlayLoad() {          playTopUI.Bottom_menuActive(true);         MenuActive(0);         }     public void StartPlay()     {         if (!isLoginState())         {             if (NotMemberAlert == null)             {                                  NotMemberAlert = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "NotMember_alert"), NotMember_local, false);                 NotMemberAlert.name = "NotMember_alert";             }             Invoke("NotMemeberStartPlay", 0.5f);          }         else         {             Destroy(NotMemberAlert);             if (DeepLink_ENOB != "" || DeepLink_BRNO != "")             {                 Invoke("NotMemeberStartPlay", 0.5f);             }             else             {                 Invoke("StartPlayLoad", 0.5f);             }         }          if (loginStep)         {             Destroy(loginStep);         }         if (Join)         {             Destroy(Join);         }            }    public void NotMemeberStartPlay()     {                     LoadingPage.SetActive(false);                 LoginMain.SetActive(false);         playTopUI.Bottom_menuActive(true);         playTopUI.ContentsMove(3);         ShowMenu();          }      public void HideMenu()     {         playTopUI.Bottom_MainMenu_Control().HideUI();     }     public void ShowMenu()     {         playTopUI.Bottom_MainMenu_Control().ShowUI();                  }     public void InuitMenu()     {         playTopUI.Bottom_MainMenu_Control().initUI();                    }     //Scene_Loding      public void StartSceneLoading(int index)     {         SceneLoading.SetActive(true);            }     public void EndSceneLoading(string testLog)     {         Debug.Log(testLog);         Invoke("EndSceneLoading_Invoke", 0.5f);     }     public void EndSceneLoading_Invoke()     {         if (SceneLoading.activeSelf)         {             SceneLoading.SetActive(false);             test.SetLog(scene_name.name[SceneLoad_index - 1] + "<== scene_name");             if (!scene_name.name[SceneLoad_index - 1].Equals("AR명함") && !scene_name.name[SceneLoad_index - 1].Equals("CommonUI"))             {                 if (!isLoginState())                 {                     Debug.Log("scene_name 체크: " + scene_name.name[SceneLoad_index - 1]);                     Debug.Log("scene_name 체크: " + scene_name.name[SceneLoad_index - 1]);                     NotMemberAlertOpen("EndSceneLoading");                  }             }         }     }             public void ARMaskinit()     {         test.SetLog("\n\n\n\n\nARMaskinit"+ SceneManagers[0].name+" "+ SceneManagers[0].activeSelf);         SceneManagers[0].SetActive(false);         test.SetLog("\n\n\n\n\nARMaskinit" + SceneManagers[0].name + " " + SceneManagers[0].activeSelf);     }      public void First_Load()     {         test.SetLog("First_Load\n");         isFirstCompeleted = true;                                LoginMain.SetActive(false);         SceneLoading_Out();        }     public void First_Load_ActionMask()     {         test.SetLog("First_Load\n");         isFirstCompeleted = true;           LoginMain.SetActive(false);         Invoke("SceneLoading_Out", 1f);         Debug.Log("SceneLoading_Out Invoke 실행했음 1초");      }     public void SceneLoading_Out()     {         SceneLoading.SetActive(false);         Debug.Log("SceneLoading SetActive_false 실행");     }     public void MemberOut()     {         if (member_info.GetContainsKey(_Member_info.KEY_NAME.ARA_MBRS_CI_VAL))         {             List<string> key = new List<string>();             List<string> value = new List<string>();              key.Add("ARA_MBRS_CI_VAL");             key.Add("ARA_MBRS_STCD");             value.Add(member_info.GetValue(_Member_info.KEY_NAME.ARA_MBRS_CI_VAL));             value.Add("DROT");              gameObject.GetComponent<UnityWeb>().WebSend(TB_TYPE.MBRS_INFO, UnityWeb.SEND_URL.Busan, URLs.MemberOut, URLs.Menu.Join, key, value, MemberOutCallback);         }         else         {             gameObject.GetComponent<Alert_Manager>().ShowAlert("로그인상태를 확인해주세요");         }      }     private void MemberOutCallback(string req, string resCode, List<Dictionary<string, string>> data)     {         Debug.Log(req);         string contents = "";         for (int i = 0; i < data.Count; i++)         {             foreach (KeyValuePair<string, string> pair in data[i])             {                 Debug.Log(pair.Key + " : " + pair.Value);                  test.SetLog(pair.Key + " : " + pair.Value + "\n");                 contents += pair.Key + " : " + pair.Value + " ";             }         }          if (req.Equals("Sucess"))         {             if (resCode.Equals("00") && data[0].ContainsKey("ARA_REQ_DVCD"))             {                 if (data[0]["ARA_REQ_DVCD"].Equals("0"))                 {                     OtherPage.SetActive(false);                     SplayerPrefs.MemberDelete();                     InuitMenu();                      LoginMain.SetActive(true);                     playTopUI.MemberOutScreen_Active(true);                     if (loginStep == null)                     {                         loginStep = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "LoginStep"), loginStep_local, false);                         loginStep.name = "loginStep";                     }                      //탈퇴됨                 }             }             else             {                 gameObject.GetComponent<Alert_Manager>().ShowAlert("회원탈퇴중 발생하였습니다.");             }         }         else         {             gameObject.GetComponent<Alert_Manager>().ShowAlert("[" + req + "] 회원탈퇴중 오류가 발생하였습니다.");         }         //  PlayerPrefs.SetInt("MemberUID",????);         //      }     public void SetAutoLoginState(bool isOn)     {         SplayerPrefs.PlayerPrefsSave("AutoLogin", (isOn) ? 1 : 0);         if (isOn)         {                          SplayerPrefs.PlayerPrefsSave("MemberHash", member_info.GetValue(_Member_info.KEY_NAME.ARA_MBRS_HASH_VAL));         }     }      public void NotMemberAlertOpen(string testPos)     {         Debug.Log("비로그인 알럿:"+testPos);         NotMemberAlert.SetActive(true);     }     public void NotMemeberLoginMove()     {          if (OtherSetting.isLoadType)         {             if (ActiveScene != SceneManagers[4])             {                 ActiveScene.SetActive(false);                 ActiveScene = SceneManagers[4];             }             else             {                 OtherPage.SetActive(false);             }             InuitMenu();             LoginMain.SetActive(true);             SceneManager.SetActiveScene(SceneManager.GetSceneAt(0));         }         else         {             if (SceneLoad_index != 1)             {                 MenuUnLoad();              }             else             {                 ActiveScene.SetActive(false);             }              InuitMenu();             LoginMain.SetActive(true);             if (loginStep == null)             {                 loginStep = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "LoginStep"), loginStep_local, false);                 loginStep.name = "LoginStep";             }             SceneLoad_index = 1;             SceneManager.SetActiveScene(SceneManager.GetSceneAt(0));         }      }     public void testLog(string msg)     {         Debug.Log("Manager_testLog:::::" + msg);     }      public void SNSMemberJoin(string SNSType, string UserId, string idToken)     {         if (Join == null)         {             Join = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "JoinStep_E"), Join_local, false);             Join.name = "JoinStep_E";             Join.SetActive(true);         }         else         {             Join.SetActive(true);         }                 Join.GetComponentInChildren<Email_JoinStep>().SNSJoin(SNSType, UserId, idToken);     }     public void EmailJoin()     {                if (Join == null)         {             Join = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "JoinStep_E"), Join_local, false);             Join.name = "JoinStep_E";             Join.SetActive(true);         }         else         {             Join.SetActive(true);         }             }          public void onLoadingPage(bool isOn)     {         SceneLoading.SetActive(isOn);     }       /// <summary>     /// 0 : 액션가면     /// 1 : 액션그림     /// 2 : 치카포카      /// 4 : 더보기     /// </summary>     /// <param name="index"></param>     public void ContentsMove(int index)     {         playTopUI.ContentsMove(index);         if(index == 4)         {             playTopUI.onReward_Click();             ShowMenu();         }              }       public GameObject GetNoticePage()     {        return assetBundleManager.GetResources(AssetBunblesManager.BUNBLE_NAME.play_ui, "Game_notice_page");              }            public void AppQuit()     {         Application.Quit();     }           public void TestssssLog(string str)     {         test.SetLog(str);     }          public Texture2D textureTest;      public void TestImageSend()     {         List<string> key = new List<string>();         key.Add("ARA_MBRS_CI_VAL");                  List<string> value = new List<string>();         value.Add(member_info.GetValue(_Member_info.KEY_NAME.ARA_MBRS_CI_VAL));          List<string> data_key = new List<string>();         data_key.Add("imgData");           List<byte[]> data_value = new List<byte[]>();                  byte[] texturePNGBytes = textureTest.EncodeToPNG();         data_value.Add(texturePNGBytes);          gameObject.GetComponent<UnityWeb>().WebSend(TB_TYPE.MBRS_INFO, UnityWeb.SEND_URL.Busan, URLs.ActionMask_ImageSend, URLs.Menu.Join, key, value, data_key, data_value, TestImageSend_Callback);     }       private void TestImageSend_Callback(string req, string resCode, List<Dictionary<string, string>> data)     {         Debug.Log(req);         string contents = "";         for (int i = 0; i < data.Count; i++)         {             foreach (KeyValuePair<string, string> pair in data[i])             {                 Debug.Log(pair.Key + " : " + pair.Value);                  test.SetLog(pair.Key + " : " + pair.Value + "\n");                 contents += pair.Key + " : " + pair.Value + " ";             }         }               //  PlayerPrefs.SetInt("MemberUID",????);         //      }     public void aabbcc()     { if (Join == null)         {             Join = GameObject.Instantiate(assetBundleManager.GetNonCompressResources(AssetBunblesManager.BUNBLE_NAME.login_ui, "JoinStep_E"), Join_local, false);             Join.name = "JoinStep_E";             Join.SetActive(true);         }         Join.SetActive(true);         Join.GetComponentInChildren<Email_JoinStep>().SNSJoin("1", "2", "3");     }             //sns      public void NaverLoginCallBack(string msg)     {         Debug.Log("NaverLoginCallBack 전송");         Debug.Log("NaverLoginCallBack 메시지"+msg);         loginStep.GetComponent<Login_Step>().NaverLoginCallBack(msg);     }     public void GetLoginToken(string msg)     {         Debug.Log("GetLoginToken 전송");         Debug.Log("GetLoginToken 메시지" + msg);         loginStep.GetComponent<Login_Step>().GetLoginToken(msg);     }     public void googleLogout(string msg)     {         test.SetLog("\ngoogle_logout_callback\n");     }     } 